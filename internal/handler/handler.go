package handler

import (
	"github.com/dhope-nagesh/titanic-go-service/internal/data"
	"github.com/dhope-nagesh/titanic-go-service/internal/model"
	"log"
	"reflect"
	"strings"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/dhope-nagesh/titanic-go-service/docs" // Docs generated by swag
)

type APIHandler struct {
	Repo data.PassengerRepository
}

func NewAPIHandler(repo data.PassengerRepository) *APIHandler {
	if repo == nil {
		log.Fatal("Repository cannot be nil")
	}
	return &APIHandler{Repo: repo}
}

func (h *APIHandler) RegisterRoutes(router *gin.Engine) {
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	api := router.Group("/api/v1")
	{
		passengers := api.Group("/passengers")
		{
			passengers.GET("", h.GetAllPassengers)
			passengers.GET("/:id", h.GetPassengerByID)
			passengers.GET("/:id/attributes", h.GetPassengerAttributes)
		}
		stats := api.Group("/stats")
		{
			stats.GET("/fare_histogram", h.GetFareHistogram)
		}
	}
}

// Helper to convert a passenger to a map and filter by attributes
func filterPassengerAttributes(p model.Passenger, attrs []string) map[string]interface{} {
	passengerValue := reflect.ValueOf(p)
	passengerType := reflect.TypeOf(p)

	filteredMap := make(map[string]interface{})

	// Create a map of Go field names to requested attributes for easy lookup
	requestedAttrs := make(map[string]bool)
	for _, attr := range attrs {
		requestedAttrs[attr] = true
	}

	for i := 0; i < passengerType.NumField(); i++ {
		field := passengerType.Field(i)
		fieldName := field.Name

		// Check if this Go field name was requested by the user
		if _, ok := requestedAttrs[fieldName]; ok {
			jsonTag := field.Tag.Get("json")

			jsonFieldName := strings.Split(jsonTag, ",")[0]

			if jsonFieldName != "" && jsonFieldName != "-" {
				fieldValue := passengerValue.Field(i)
				filteredMap[jsonFieldName] = fieldValue.Interface()
			}
		}
	}
	return filteredMap
}
